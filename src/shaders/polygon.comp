#version 430

// local_size should always be an xy-square with side length of 2^n
layout(local_size_x = 4, local_size_y = 4) in;

const float PI = 3.1415926538;


const float SCREEN_SIZE = 512.0;
const float CELL_SIZE = SCREEN_SIZE / float(gl_WorkGroupSize.x);

const uint NUM_VERTICES = 5;

struct Polygon
{
    vec4 color;
    vec2 center;
    float radius;
    float rotation;
};

layout(std430, binding = 0) readonly buffer polygonBuffer
{
    Polygon polygons[];
};

struct Vertex
{
    vec4 color;
    vec2 position;
    vec2 origin;
};

layout(std430, binding = 1) writeonly buffer vertexBuffer
{
    Vertex vertices[];
};

layout(std430, binding = 2) writeonly buffer indexBuffer
{
    uint indices[];
};

vec2 cellToWorld(vec2 cell_corner, vec2 position)
{
    return cell_corner + position * CELL_SIZE;
}

// Generate the nth position of a polygon located in a specific cell.
vec2 generatePosition(vec2 cell_corner, Polygon p, uint n)
{
    // Calculate position in the range [-1, 2].
    float t = 2 * PI * n / NUM_VERTICES;
    vec2 position = p.center + p.radius * vec2(cos(t), sin(t));

    // Map position from [-1, 2] -> [-CELL_SIZE, SCREEN_SIZE + CELL_SIZE].
    return cellToWorld(cell_corner, position);
}

void main()
{
    Polygon p = polygons[gl_LocalInvocationIndex];

    // The index this polygon's vertices start at.
    uint v_offset = (NUM_VERTICES + 1) * gl_LocalInvocationIndex;

    // The index this polygon's indices start at.
    uint i_offset = NUM_VERTICES * 3 * gl_LocalInvocationIndex;

    // The index of this polygon's center vertex.
    uint c_offset = NUM_VERTICES + v_offset;

    vec2 cell_corner = CELL_SIZE * vec2(gl_LocalInvocationID.xy);

    for (uint i = 0; i < NUM_VERTICES; i++)
    {
        vertices[i + v_offset].color = p.color;
        vertices[i + v_offset].position = generatePosition(cell_corner, p, i);
        vertices[i + v_offset].origin = cell_corner;

        indices[i * 3 + i_offset] = i + v_offset;
        indices[i * 3 + 1 + i_offset] = c_offset;
        indices[i * 3 + 2 + i_offset] = v_offset + i + 1;
    }
    
    vertices[c_offset].color = p.color;
    vertices[c_offset].position = cellToWorld(cell_corner, p.center); 
    vertices[c_offset].origin = cell_corner;

    indices[NUM_VERTICES * 3 - 1 + i_offset] = v_offset;
}
